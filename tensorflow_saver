import tensorflow as tf

sess = tf.Session()

import tensorflow as tf

with tf.Session() as sess:
	
	# 搭建网络
	x = tf.placeholder(tf.float32, name='x') # 两个placeholder
	y = tf.placeholder(tf.float32, name='y')
	b = tf.Variable(initial_value=1., name='b') # 可训练变量
	# 网络结构
	xy = tf.multiply(x, y)
	op = tf.add(xy, b, name='op')
	
	# 变量初始化
	sess.run(tf.global_variables_initializer())
	print(sess.run(op, feed_dict={x: 2, y: 3}))

	# ckpt保存
	saver = tf.train.Saver()
	saver.save(sess, './model/ckpt/test')
	# pb保存
	constant_graph = tf.graph_util.convert_variables_to_constants(sess, sess.graph_def, ['op'])
	with tf.gfile.FastGFile('model/pb/test.pb', 'wb') as f:
		f.write(constant_graph.SerializeToString())

	# savedmodel文件保存
	builder = tf.saved_model.builder.SavedModelBuilder('./model/savemodel')
	builder.add_meta_graph_and_variables(sess=sess, tags=['cpu_server_1'])
	builder.save()
	print('over')
	

	# ckpt加载
	saver = tf.train.import_meta_graph('./model/ckpt/test.meta')
	saver.restore(sess=sess, save_path=tf.train.latest_checkpoint('./model/ckpt/'))
	
	# pb加载
	with tf.gfile.FastGFile('./model/pb/test.pb', 'rb') as f:
		graph_def = tf.GraphDef()
		graph_def.ParseFromString(f.read())
		tf.import_graph_def(graph_def, name='')

	# savemodel加载
	#tf.saved_model.loader.load(sess, ['cpu_server_1'], './model/savemodel')

	# 测试模型加载是否成功
	input_x = sess.graph.get_tensor_by_name('x:0')
	input_y = sess.graph.get_tensor_by_name('y:0')
	op = sess.graph.get_tensor_by_name('op:0')
	ret = sess.run(op, feed_dict={input_x: 5, input_y: 5})
	print(ret)
